# -*- coding: utf-8 -*-
"""assignment.python.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r2tSolTIwW3IWutklZDme0qt8ZIuTYrx
"""

#importing libraries
import numpy as np
import matplotlib.pyplot as plt
#x vector contains x1 , x2
x = np.array([1,-2])

#y vector contains y1, y2 

y = np.array([-3,4])

m= 1
n=2
p = float (m/(m+n))
q = float (n/(m+n))
a_arr =q*np.array([ 1,-2])
b_arr =p*np.array([-3,4])


#internal coordinate p
out_arr= np.add(a_arr , b_arr)

print ("internal coordinate points:", out_arr)
r =float(m/(m+n))
s =float(n/(m+n))

c_arr = r*np.array([1, -2])
d_arr = r*np.array([-3 ,4])

#other internal coordinate point
out_arr2 = np.add(c_arr, d_arr)
print ("other internal points:", out_arr2)


x = ( 1, -5/3 , -3, -1/3,)
y = (-2, 2, 4, 0)
plt.plot(x,y)
plt.plot(x,y,'ro')
plt.plot(-5/3,2,'yo' ,label='internal divided point S:')
plt.plot(-1/3,0,'bo', label='another internal point Q:')
plt.xlabel('x-axis')
plt.xlabel('y-axis')
plt.title('tridection coordinates')
for i , j in zip (x,y):
    plt.text(i , j+.5, '({}, {})'.format(i,j))
plt.grid()
plt.legend()
plt.show()